"""
Streamlit-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–æ–≤.
"""

import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import os
import json
from datetime import datetime

from data_loader import BacktestDataLoader
from visualizations import BacktestVisualizer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Backtest Dashboard",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üìä Backtest Dashboard")
st.markdown("---")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
def export_settings(selected_symbols, selected_strategies, start_date, end_date, chart_type, show_columns, max_rows):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ JSON —Ñ–æ—Ä–º–∞—Ç."""
    settings = {
        "selected_symbols": selected_symbols,
        "selected_strategies": selected_strategies,
        "start_date": start_date.strftime('%Y-%m-%d') if start_date else None,
        "end_date": end_date.strftime('%Y-%m-%d') if end_date else None,
        "chart_type": chart_type,
        "show_columns": show_columns,
        "max_rows": max_rows,
        "export_timestamp": datetime.now().isoformat()
    }
    return json.dumps(settings, ensure_ascii=False, indent=2)

def import_settings(uploaded_file):
    """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞."""
    try:
        settings = json.load(uploaded_file)
        return settings
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")
        return None

def apply_settings(settings, symbols, strategies, min_date, max_date):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É."""
    if not settings:
        return None, None, None, None, None, None, None
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    selected_symbols = settings.get('selected_symbols', symbols[:5] if len(symbols) > 5 else symbols)
    selected_strategies = settings.get('selected_strategies', strategies[:3] if len(strategies) > 3 else strategies)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    selected_symbols = [s for s in selected_symbols if s in symbols]
    selected_strategies = [s for s in selected_strategies if s in strategies]
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if not selected_symbols:
        selected_symbols = symbols[:5] if len(symbols) > 5 else symbols
    if not selected_strategies:
        selected_strategies = strategies[:3] if len(strategies) > 3 else strategies
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç
    start_date_str = settings.get('start_date')
    end_date_str = settings.get('end_date')
    
    start_date = None
    end_date = None
    
    if start_date_str and min_date:
        try:
            start_date = pd.to_datetime(start_date_str).date()
            if start_date < min_date.date():
                start_date = min_date.date()
            if start_date > max_date.date():
                start_date = max_date.date()
        except:
            start_date = min_date.date()
    
    if end_date_str and max_date:
        try:
            end_date = pd.to_datetime(end_date_str).date()
            if end_date < min_date.date():
                end_date = min_date.date()
            if end_date > max_date.date():
                end_date = max_date.date()
        except:
            end_date = max_date.date()
    
    chart_type = settings.get('chart_type', 'PNL –ø–æ —Å–¥–µ–ª–∫–∞–º')
    show_columns = settings.get('show_columns', ['symbol', 'strategy_name', 'type', 'entry_price', 'exit_price', 'PNL', 'PNL_percentage', 'holding_period', 'opened_at'])
    max_rows = settings.get('max_rows', 100)
    
    return selected_symbols, selected_strategies, start_date, end_date, chart_type, show_columns, max_rows

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
@st.cache_resource
def initialize_components():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    data_folder = "input/batch-backtest-09-2025"
    loader = BacktestDataLoader(data_folder)
    visualizer = BacktestVisualizer()
    return loader, visualizer

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
loader, visualizer = initialize_components()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
def load_default_settings():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ example_settings.json –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã."""
    if not any(key in st.session_state for key in ['imported_symbols', 'imported_strategies', 'imported_start_date', 'imported_end_date']):
        try:
            with open('example_settings.json', 'r', encoding='utf-8') as f:
                default_settings = json.load(f)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            symbols = loader.get_unique_symbols()
            strategies = loader.get_unique_strategies()
            min_date, max_date = loader.get_date_range()
            
            new_symbols, new_strategies, new_start_date, new_end_date, new_chart_type, new_show_columns, new_max_rows = apply_settings(
                default_settings, symbols, strategies, min_date, max_date
            )
            
            if new_symbols is not None:
                st.session_state.imported_symbols = new_symbols
                st.session_state.imported_strategies = new_strategies
                st.session_state.imported_start_date = new_start_date
                st.session_state.imported_end_date = new_end_date
                st.session_state.imported_chart_type = new_chart_type
                st.session_state.imported_show_columns = new_show_columns
                st.session_state.imported_max_rows = new_max_rows
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                st.info("üéØ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ example_settings.json")
        except FileNotFoundError:
            # –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            pass
        except Exception as e:
            # –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            pass

# –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
load_default_settings()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
try:
    df = loader.load_all_data()
    if df.empty:
        st.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!")
        st.stop()
except Exception as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    st.stop()

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
st.sidebar.header("üîç –§–∏–ª—å—Ç—Ä—ã")

# –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
symbols = loader.get_unique_symbols()
strategies = loader.get_unique_strategies()
min_date, max_date = loader.get_date_range()

# –§–∏–ª—å—Ç—Ä –ø–æ —Å–∏–º–≤–æ–ª–∞–º
# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
default_symbols = st.session_state.get('imported_symbols', symbols[:5] if len(symbols) > 5 else symbols)
selected_symbols = st.sidebar.multiselect(
    "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—ã:",
    options=symbols,
    default=default_symbols,
    help="–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
)

# –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
default_strategies = st.session_state.get('imported_strategies', strategies[:3] if len(strategies) > 3 else strategies)
selected_strategies = st.sidebar.multiselect(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:",
    options=strategies,
    default=default_strategies,
    help="–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
)

# –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º
st.sidebar.markdown("---")
st.sidebar.subheader("üìÖ –í—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥")

if min_date and max_date:
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
    st.sidebar.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–π –ø–µ—Ä–∏–æ–¥:\n{min_date.strftime('%Y-%m-%d')} - {max_date.strftime('%Y-%m-%d')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –¥–∞—Ç
    imported_start_date = st.session_state.get('imported_start_date')
    imported_end_date = st.session_state.get('imported_end_date')
    
    default_start_date = imported_start_date if imported_start_date else min_date.date()
    default_end_date = imported_end_date if imported_end_date else max_date.date()
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç–µ
    start_date = st.sidebar.date_input(
        "–ü–µ—Ä–∏–æ–¥ —Å:",
        value=default_start_date,
        min_value=min_date.date(),
        max_value=max_date.date(),
        help="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
    )
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç–µ
    end_date = st.sidebar.date_input(
        "–ü–µ—Ä–∏–æ–¥ –ø–æ:",
        value=default_end_date,
        min_value=min_date.date(),
        max_value=max_date.date(),
        help="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    if start_date > end_date:
        st.sidebar.error("‚ùå –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–π!")
        start_date = min_date.date()
        end_date = max_date.date()
    
    # –ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–æ–≤
    st.sidebar.markdown("**–ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä:**")
    col1, col2 = st.sidebar.columns(2)
    
    with col1:
        if st.button("üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü", help="–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π"):
            end_date = max_date.date()
            start_date = (pd.Timestamp(end_date) - pd.Timedelta(days=30)).date()
            st.rerun()
    
    with col2:
        if st.button("üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞", help="–ü–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π"):
            end_date = max_date.date()
            start_date = (pd.Timestamp(end_date) - pd.Timedelta(days=90)).date()
            st.rerun()
    
    col3, col4 = st.sidebar.columns(2)
    
    with col3:
        if st.button("üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤", help="–ü–æ—Å–ª–µ–¥–Ω–∏–µ 180 –¥–Ω–µ–π"):
            end_date = max_date.date()
            start_date = (pd.Timestamp(end_date) - pd.Timedelta(days=180)).date()
            st.rerun()
    
    with col4:
        if st.button("üìÖ –ó–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥", help="–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"):
            start_date = min_date.date()
            end_date = max_date.date()
            st.rerun()
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ –¥–∞—Ç–∞–º
    if st.sidebar.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∞—Ç—ã"):
        start_date = min_date.date()
        end_date = max_date.date()
        st.rerun()
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if st.sidebar.button("üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
        # –û—á–∏—â–∞–µ–º session state
        for key in ['imported_symbols', 'imported_strategies', 'imported_start_date', 'imported_end_date', 'imported_chart_type', 'imported_show_columns', 'imported_max_rows']:
            if key in st.session_state:
                del st.session_state[key]
        st.success("‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã!")
        st.rerun()
else:
    start_date = None
    end_date = None

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
filtered_df = loader.filter_data(
    selected_symbols, 
    selected_strategies, 
    start_date.strftime('%Y-%m-%d') if start_date else None,
    end_date.strftime('%Y-%m-%d') if end_date else None
)

if filtered_df.empty:
    st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º!")
    st.stop()

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
if start_date and end_date:
    st.info(f"üìÖ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π –ø–µ—Ä–∏–æ–¥: {start_date.strftime('%Y-%m-%d')} - {end_date.strftime('%Y-%m-%d')}")

# –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
overall_metrics = loader.get_overall_metrics(filtered_df)

# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
col1, col2, col3, col4, col5, col6 = st.columns(6)

with col1:
    st.metric("–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫", f"{overall_metrics['total_trades']:,}")
with col2:
    st.metric("–û–±—â–∏–π PNL", f"{overall_metrics['total_pnl']:.2f} USDT", delta=f"{overall_metrics['total_pnl']:.2f}")
with col3:
    st.metric("–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö", f"{overall_metrics['win_rate']:.1f}%")
with col4:
    st.metric("–ü—Ä–æ—Ñ–∏—Ç-—Ñ–∞–∫—Ç–æ—Ä", f"{overall_metrics['profit_factor']:.2f}")
with col5:
    st.metric("–ú–∞—Ç. –æ–∂–∏–¥–∞–Ω–∏–µ", f"{overall_metrics['expected_value']:.4f} USDT")
with col6:
    st.metric("–ö–æ—ç—Ñ. –®–∞—Ä–ø–∞", f"{overall_metrics['sharpe_ratio']:.4f}")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
col1, col2, col3, col4 = st.columns(4)

with col1:
    st.metric("–°—Ä–µ–¥–Ω–∏–π PNL", f"{overall_metrics['avg_pnl']:.4f} USDT")
with col2:
    st.metric("–ú–µ–¥–∏–∞–Ω–Ω—ã–π PNL", f"{overall_metrics['median_pnl']:.4f} USDT")
with col3:
    st.metric("–ú–∞–∫—Å. –ø—Ä–∏–±—ã–ª—å", f"{overall_metrics['max_profit']:.2f} USDT")
with col4:
    st.metric("–ú–∞–∫—Å. —É–±—ã—Ç–æ–∫", f"{overall_metrics['max_loss']:.2f} USDT")

st.markdown("---")

# –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
tab1, tab2, tab3, tab4, tab5 = st.tabs(["üìà –ì—Ä–∞—Ñ–∏–∫–∏ PNL", "üìä –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π", "üí∞ –ú–µ—Ç—Ä–∏–∫–∏", "üìã –¢–∞–±–ª–∏—Ü—ã", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"])

with tab1:
    st.header("–ì—Ä–∞—Ñ–∏–∫–∏ PNL")
    
    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    default_chart_type = st.session_state.get('imported_chart_type', "PNL –ø–æ —Å–¥–µ–ª–∫–∞–º")
    chart_type = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞:",
        ["PNL –ø–æ —Å–¥–µ–ª–∫–∞–º", "–ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π PNL", "PNL –ø–æ –≤—Ä–µ–º–µ–Ω–∏", "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ PNL"],
        index=["PNL –ø–æ —Å–¥–µ–ª–∫–∞–º", "–ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π PNL", "PNL –ø–æ –≤—Ä–µ–º–µ–Ω–∏", "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ PNL"].index(default_chart_type) if default_chart_type in ["PNL –ø–æ —Å–¥–µ–ª–∫–∞–º", "–ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π PNL", "PNL –ø–æ –≤—Ä–µ–º–µ–Ω–∏", "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ PNL"] else 0
    )
    
    if chart_type == "PNL –ø–æ —Å–¥–µ–ª–∫–∞–º":
        fig = visualizer.plot_pnl_by_trades(filtered_df, f"PNL –ø–æ —Å–¥–µ–ª–∫–∞–º - {', '.join(selected_symbols)}")
        st.plotly_chart(fig, width='stretch')
    
    elif chart_type == "–ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π PNL":
        fig = visualizer.plot_cumulative_pnl(filtered_df, f"–ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π PNL - {', '.join(selected_symbols)}")
        st.plotly_chart(fig, width='stretch')
    
    elif chart_type == "PNL –ø–æ –≤—Ä–µ–º–µ–Ω–∏":
        fig = visualizer.plot_pnl_timeline(filtered_df, f"PNL –ø–æ –≤—Ä–µ–º–µ–Ω–∏ - {', '.join(selected_symbols)}")
        st.plotly_chart(fig, width='stretch')
    
    elif chart_type == "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ PNL":
        fig = visualizer.plot_pnl_distribution(filtered_df, f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ PNL –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º")
        st.plotly_chart(fig, width='stretch')

with tab2:
    st.header("–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        fig = visualizer.plot_strategy_comparison(filtered_df)
        st.plotly_chart(fig, width='stretch')
    
    with col2:
        # –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
        fig = visualizer.plot_win_rate_by_strategy(filtered_df)
        st.plotly_chart(fig, width='stretch')
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è
    st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è")
    fig = visualizer.plot_holding_period_distribution(filtered_df)
    st.plotly_chart(fig, use_container_width=True)

with tab3:
    st.header("–ú–µ—Ç—Ä–∏–∫–∏")
    
    # –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
    st.subheader("–ú–µ—Ç—Ä–∏–∫–∏ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º")
    strategy_metrics = loader.get_strategy_metrics(filtered_df)
    
    if not strategy_metrics.empty:
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        display_metrics = strategy_metrics[['strategy_name', 'total_pnl', 'avg_pnl', 'win_rate', 'trades_count', 'profit_factor', 'expected_value']].copy()
        display_metrics.columns = ['–°—Ç—Ä–∞—Ç–µ–≥–∏—è', '–û–±—â–∏–π PNL', '–°—Ä–µ–¥–Ω–∏–π PNL', '–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫', '–ü—Ä–æ—Ñ–∏—Ç-—Ñ–∞–∫—Ç–æ—Ä', '–ú–∞—Ç. –æ–∂–∏–¥–∞–Ω–∏–µ']
        
        st.dataframe(
            display_metrics,
            width='stretch',
            hide_index=True
        )
        
        # –ì—Ä–∞—Ñ–∏–∫ –º–µ—Ç—Ä–∏–∫
        fig = make_subplots(
            rows=2, cols=2,
            subplot_titles=('–û–±—â–∏–π PNL –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º', '–ü—Ä–æ—Ñ–∏—Ç-—Ñ–∞–∫—Ç–æ—Ä –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º', 
                          '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º', '–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫'),
            vertical_spacing=0.15
        )
        
        # –û–±—â–∏–π PNL
        fig.add_trace(go.Bar(
            x=strategy_metrics['strategy_name'],
            y=strategy_metrics['total_pnl'],
            name='–û–±—â–∏–π PNL',
            marker_color='lightblue'
        ), row=1, col=1)
        
        # –ü—Ä–æ—Ñ–∏—Ç-—Ñ–∞–∫—Ç–æ—Ä
        fig.add_trace(go.Bar(
            x=strategy_metrics['strategy_name'],
            y=strategy_metrics['profit_factor'],
            name='–ü—Ä–æ—Ñ–∏—Ç-—Ñ–∞–∫—Ç–æ—Ä',
            marker_color='lightgreen'
        ), row=1, col=2)
        
        # –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
        fig.add_trace(go.Bar(
            x=strategy_metrics['strategy_name'],
            y=strategy_metrics['expected_value'],
            name='–ú–∞—Ç. –æ–∂–∏–¥–∞–Ω–∏–µ',
            marker_color='lightcoral'
        ), row=2, col=1)
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö
        fig.add_trace(go.Bar(
            x=strategy_metrics['strategy_name'],
            y=strategy_metrics['win_rate'],
            name='–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö',
            marker_color='lightyellow'
        ), row=2, col=2)
        
        fig.update_layout(
            title="–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π",
            height=600,
            showlegend=False
        )
        
        st.plotly_chart(fig, width='stretch')
    
    # –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
    st.subheader("–ú–µ—Ç—Ä–∏–∫–∏ –ø–æ —Å–∏–º–≤–æ–ª–∞–º")
    symbol_metrics = loader.get_symbol_metrics(filtered_df)
    
    if not symbol_metrics.empty:
        display_symbol_metrics = symbol_metrics[['symbol', 'total_pnl', 'avg_pnl', 'win_rate', 'trades_count', 'profit_factor', 'expected_value']].copy()
        display_symbol_metrics.columns = ['–°–∏–º–≤–æ–ª', '–û–±—â–∏–π PNL', '–°—Ä–µ–¥–Ω–∏–π PNL', '–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫', '–ü—Ä–æ—Ñ–∏—Ç-—Ñ–∞–∫—Ç–æ—Ä', '–ú–∞—Ç. –æ–∂–∏–¥–∞–Ω–∏–µ']
        
        st.dataframe(
            display_symbol_metrics,
            width='stretch',
            hide_index=True
        )

with tab4:
    st.header("–¢–∞–±–ª–∏—Ü—ã –¥–∞–Ω–Ω—ã—Ö")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
    col1, col2 = st.columns(2)
    
    with col1:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫
        default_show_columns = st.session_state.get('imported_show_columns', ['symbol', 'strategy_name', 'type', 'entry_price', 'exit_price', 'PNL', 'PNL_percentage', 'holding_period', 'opened_at'])
        show_columns = st.multiselect(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
            options=filtered_df.columns.tolist(),
            default=default_show_columns
        )
    
    with col2:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫
        default_max_rows = st.session_state.get('imported_max_rows', 100)
        max_rows = st.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫:", 10, 1000, default_max_rows)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    if show_columns:
        display_df = filtered_df[show_columns].head(max_rows)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        numeric_columns = ['entry_price', 'exit_price', 'PNL', 'PNL_percentage', 'holding_period']
        for col in numeric_columns:
            if col in display_df.columns:
                display_df[col] = display_df[col].round(4)
        
        st.dataframe(
            display_df,
            width='stretch',
            hide_index=True
        )
        
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        csv = display_df.to_csv(index=False)
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ CSV",
            data=csv,
            file_name=f"backtest_data_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
            mime="text/csv"
        )

with tab5:
    st.header("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
    st.markdown("–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üì§ –≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        st.markdown("–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        current_settings = {
            "selected_symbols": selected_symbols,
            "selected_strategies": selected_strategies,
            "start_date": start_date.strftime('%Y-%m-%d') if start_date else None,
            "end_date": end_date.strftime('%Y-%m-%d') if end_date else None,
            "chart_type": chart_type if 'chart_type' in locals() else "PNL –ø–æ —Å–¥–µ–ª–∫–∞–º",
            "show_columns": show_columns if 'show_columns' in locals() else ['symbol', 'strategy_name', 'type', 'entry_price', 'exit_price', 'PNL', 'PNL_percentage', 'holding_period', 'opened_at'],
            "max_rows": max_rows if 'max_rows' in locals() else 100
        }
        
        # –°–æ–∑–¥–∞–µ–º JSON –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        settings_json = export_settings(
            current_settings["selected_symbols"],
            current_settings["selected_strategies"],
            start_date,
            end_date,
            current_settings["chart_type"],
            current_settings["show_columns"],
            current_settings["max_rows"]
        )
        
        # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        st.download_button(
            label="üíæ –°–∫–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            data=settings_json,
            file_name=f"backtest_settings_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
            mime="application/json",
            help="–°–∫–∞—á–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        st.markdown("**–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**")
        st.json(current_settings)
    
    with col2:
        st.subheader("üì• –ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞.")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
        uploaded_file = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ JSON —Ñ–∞–π–ª —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:",
            type=['json'],
            help="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏, —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–Ω–µ–µ"
        )
        
        if uploaded_file is not None:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            imported_settings = import_settings(uploaded_file)
            
            if imported_settings:
                st.success("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                st.markdown("**–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**")
                st.json(imported_settings)
                
                # –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
                if st.button("üîÑ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", type="primary"):
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    new_symbols, new_strategies, new_start_date, new_end_date, new_chart_type, new_show_columns, new_max_rows = apply_settings(
                        imported_settings, symbols, strategies, min_date, max_date
                    )
                    
                    if new_symbols is not None:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ session state
                        st.session_state.imported_symbols = new_symbols
                        st.session_state.imported_strategies = new_strategies
                        st.session_state.imported_start_date = new_start_date
                        st.session_state.imported_end_date = new_end_date
                        st.session_state.imported_chart_type = new_chart_type
                        st.session_state.imported_show_columns = new_show_columns
                        st.session_state.imported_max_rows = new_max_rows
                        
                        st.success("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã! –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
                        st.rerun()
                    else:
                        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!")
            else:
                st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞!")
    
    # –†–∞–∑–¥–µ–ª —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    st.markdown("---")
    st.subheader("üéØ –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    st.markdown("–ë—ã—Å—Ç—Ä–æ –ø—Ä–∏–º–µ–Ω–∏—Ç–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        if st.button("üìà –¢–æ–ø-—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏", help="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª—É—á—à–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"):
            # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–ø-3 —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ PNL
            strategy_metrics = loader.get_strategy_metrics(filtered_df)
            top_strategies = strategy_metrics.nlargest(3, 'total_pnl')['strategy_name'].tolist()
            st.session_state.imported_strategies = top_strategies
            st.session_state.imported_symbols = selected_symbols  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ —Å–∏–º–≤–æ–ª—ã
            st.success("‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–æ–ø-—Å—Ç—Ä–∞—Ç–µ–≥–∏–π!")
            st.rerun()
    
    with col2:
        if st.button("üí∞ –¢–æ–ø-–º–æ–Ω–µ—Ç—ã", help="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª—É—á—à–∏–µ –º–æ–Ω–µ—Ç—ã"):
            # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–ø-5 –º–æ–Ω–µ—Ç –ø–æ PNL
            symbol_metrics = loader.get_symbol_metrics(filtered_df)
            top_symbols = symbol_metrics.nlargest(5, 'total_pnl')['symbol'].tolist()
            st.session_state.imported_symbols = top_symbols
            st.session_state.imported_strategies = selected_strategies  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            st.success("‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–æ–ø-–º–æ–Ω–µ—Ç!")
            st.rerun()
    
    with col3:
        if st.button("üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü", help="–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü"):
            if max_date:
                last_month = (pd.Timestamp(max_date) - pd.Timedelta(days=30)).date()
                st.session_state.imported_start_date = last_month
                st.session_state.imported_end_date = max_date.date()
                st.success("‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–µ—Å—è—Ü–∞!")
                st.rerun()
    
    with col4:
        if st.button("üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", help="–ó–∞–≥—Ä—É–∑–∏—Ç—å example_settings.json"):
            try:
                with open('example_settings.json', 'r', encoding='utf-8') as f:
                    default_settings = json.load(f)
                
                new_symbols, new_strategies, new_start_date, new_end_date, new_chart_type, new_show_columns, new_max_rows = apply_settings(
                    default_settings, symbols, strategies, min_date, max_date
                )
                
                if new_symbols is not None:
                    st.session_state.imported_symbols = new_symbols
                    st.session_state.imported_strategies = new_strategies
                    st.session_state.imported_start_date = new_start_date
                    st.session_state.imported_end_date = new_end_date
                    st.session_state.imported_chart_type = new_chart_type
                    st.session_state.imported_show_columns = new_show_columns
                    st.session_state.imported_max_rows = new_max_rows
                    
                    st.success("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é!")
                    st.rerun()
                else:
                    st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é!")
            except FileNotFoundError:
                st.error("‚ùå –§–∞–π–ª example_settings.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
    st.markdown("---")
    st.subheader("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    st.markdown("""
    **–ß—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö:**
    - –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (–º–æ–Ω–µ—Ç—ã)
    - –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    - –í—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥ (–¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è)
    - –¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    - –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ
    - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
    
    **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
    1. –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ example_settings.json
    2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Å–≤–æ–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é
    3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
    4. –ù–∞–∂–º–∏—Ç–µ "–°–∫–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏" –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    5. –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
    6. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∏—Å—Ö–æ–¥–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
    """)

# –§—É—Ç–µ—Ä
st.markdown("---")
st.markdown(
    """
    <div style='text-align: center; color: gray;'>
        <p>Backtest Dashboard | –°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é Streamlit –∏ Plotly</p>
    </div>
    """,
    unsafe_allow_html=True
)
