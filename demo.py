#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è Backtest Dashboard.
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
"""

import pandas as pd
import json
import os
from data_loader import BacktestDataLoader
from visualizations import BacktestVisualizer

def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    
    print("üöÄ Backtest Dashboard - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    data_folder = "input/batch-backtest-09-2025"
    loader = BacktestDataLoader(data_folder)
    visualizer = BacktestVisualizer()
    
    print(f"üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞–ø–∫–∏: {data_folder}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    if not os.path.exists(data_folder):
        print(f"‚ùå –ü–∞–ø–∫–∞ {data_folder} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print("–°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É –∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ —Ç—É–¥–∞ JSON-—Ñ–∞–π–ª—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –±—ç–∫—Ç–µ—Å—Ç–æ–≤.")
        return
    
    json_files = [f for f in os.listdir(data_folder) if f.endswith('.json')]
    if not json_files:
        print(f"‚ùå –í –ø–∞–ø–∫–µ {data_folder} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ JSON-—Ñ–∞–π–ª–æ–≤!")
        return
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(json_files)} JSON-—Ñ–∞–π–ª–æ–≤")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        print("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
        df = loader.load_all_data()
        
        if df.empty:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ!")
            return
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å–¥–µ–ª–æ–∫")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        overall_metrics = loader.get_overall_metrics(df)
        
        print("\nüìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {overall_metrics['total_trades']:,}")
        print(f"   ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {df['strategy_name'].nunique()}")
        print(f"   ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {df['symbol'].nunique()}")
        print(f"   ‚Ä¢ –û–±—â–∏–π PNL: {overall_metrics['total_pnl']:.2f} USDT")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π PNL: {overall_metrics['avg_pnl']:.4f} USDT")
        print(f"   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {overall_metrics['win_rate']:.1f}%")
        print(f"   ‚Ä¢ –ü—Ä–æ—Ñ–∏—Ç-—Ñ–∞–∫—Ç–æ—Ä: {overall_metrics['profit_factor']:.2f}")
        print(f"   ‚Ä¢ –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ: {overall_metrics['expected_value']:.4f} USDT")
        print(f"   ‚Ä¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞: {overall_metrics['sharpe_ratio']:.4f}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø–æ PNL
        print("\nüèÜ –¢–æ–ø-5 —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø–æ –æ–±—â–µ–º—É PNL:")
        strategy_metrics = loader.get_strategy_metrics(df)
        top_strategies = strategy_metrics.nlargest(5, 'total_pnl')
        
        for _, row in top_strategies.iterrows():
            print(f"   ‚Ä¢ {row['strategy_name']}: {row['total_pnl']:.2f} USDT ({row['trades_count']} —Å–¥–µ–ª–æ–∫, PF: {row['profit_factor']:.2f}, EV: {row['expected_value']:.4f})")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ PNL
        print("\nüí∞ –¢–æ–ø-5 —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ –æ–±—â–µ–º—É PNL:")
        symbol_metrics = loader.get_symbol_metrics(df)
        top_symbols = symbol_metrics.nlargest(5, 'total_pnl')
        
        for _, row in top_symbols.iterrows():
            print(f"   ‚Ä¢ {row['symbol']}: {row['total_pnl']:.2f} USDT ({row['trades_count']} —Å–¥–µ–ª–æ–∫)")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º —Å–¥–µ–ª–æ–∫
        print("\nüìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º —Å–¥–µ–ª–æ–∫:")
        type_counts = df['type'].value_counts()
        for trade_type, count in type_counts.items():
            print(f"   ‚Ä¢ {trade_type}: {count} —Å–¥–µ–ª–æ–∫")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
        print(f"\n‚è∞ –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω:")
        print(f"   ‚Ä¢ –ü–µ—Ä–≤–∞—è —Å–¥–µ–ª–∫–∞: {df['opened_at'].min()}")
        print(f"   ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞: {df['opened_at'].max()}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è
        avg_holding_hours = df['holding_period'].mean() / 3600
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è: {avg_holding_hours:.1f} —á–∞—Å–æ–≤")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –¥–∞—Ç–∞–º
        print(f"\nüìÖ –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–∞–º:")
        min_date, max_date = loader.get_date_range()
        print(f"   ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {min_date.strftime('%Y-%m-%d')} - {max_date.strftime('%Y-%m-%d')}")
        
        # –ü—Ä–∏–º–µ—Ä —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
        from datetime import datetime, timedelta
        last_month = (max_date - timedelta(days=30)).strftime('%Y-%m-%d')
        recent_df = loader.filter_data(
            start_date=last_month,
            end_date=max_date.strftime('%Y-%m-%d')
        )
        print(f"   ‚Ä¢ –°–¥–µ–ª–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü: {len(recent_df)}")
        if len(recent_df) > 0:
            print(f"   ‚Ä¢ PNL –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü: {recent_df['PNL'].sum():.2f} USDT")
        
        print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("\nüåê –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        print("   streamlit run app.py")
        print("\nüìñ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞:")
        print("   python run.py")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
